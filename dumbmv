#! /usr/bin/env python3

import argparse
import os
import sys

__version__ = '1.1.0'

def load_hashes(file):
    with open(file, 'r') as f:
        return {name[0]: name[1] for name in [name.strip().split(' ', 1) for name in f.readlines()]}

def main(args):
    parser = argparse.ArgumentParser(description='Rename files by hash.')
    parser.add_argument('sources')
    parser.add_argument('targets')
    parser.add_argument('-d', '--dry-run',
                        action='store_true',
                        default=False,
                        help="Don't actually rename anything, just preview "
                           + "what would normally be done.")
    parser.add_argument('--version',
                        action='version',
                        version=f'%(prog)s {__version__}')
    args = parser.parse_args()

    if not os.access(args.sources, os.R_OK):
        parser.error(f'sources file "{args.sources}" doesn\'t exist or '
                   + 'isn\'t readable.')

    if not os.access(args.targets, os.R_OK):
        parser.error(f'targets file "{args.targets}" doesn\'t exist or '
                   + 'isn\'t readable.')

    sources = load_hashes(args.sources)
    targets = load_hashes(args.targets)

    for hash in sources:
        if not hash in targets:
            #print(f'No new name for "{sources[hash]}".')
            continue

        if sources[hash] == targets[hash]:
            #print(f'"{sources[hash]}" is already named correctly.')
            continue

        if not os.access(sources[hash], os.R_OK):
            print(f'"{sources[hash]}" doesn\'t exist or isn\'t readable. Maybe it\'s been renamed already.', file=sys.stderr)
            continue

        print(f'Renaming "{sources[hash]}" to "{targets[hash]}".')
        try:
            if not args.dry_run:
                os.rename(sources[hash], targets[hash])
        except OSError as e:
            print(f'Failure renaming "{sources[hash]}" to "{targets[hash]}": {e}', file=sys.stderr)

if __name__ == '__main__':
    sys.exit(main(sys.argv))
